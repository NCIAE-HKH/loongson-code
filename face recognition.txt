#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
人脸识别脚本 - 修复识别失败问题
解决注册后仍被识别为陌生人
"""

import cv2
import os
import numpy as np
import sys
import time
import logging
import socket
import pickle
import struct
import glob

# ==== 配置参数 =====
PROJECT_DIR = os.path.join(os.path.expanduser("~"), "projects/my_project")
CASCADE_PATH = os.path.join(PROJECT_DIR, "shared", "haarcascade_frontalface_default.xml")
TRAINER_PATH = os.path.join(PROJECT_DIR, "shared", "face_model.yml")
ID_MAP_PATH = os.path.join(PROJECT_DIR, "shared", "id_map.txt")
PC_IP = '192.168.1.166'  # PC端IP地址
PC_PORT = 8888            # PC端端口
ALARM_PATH = '/home/long2/audio/alarm.wav'  # 确保此文件存在

# ==== 配置日志 =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('FaceRecognition')

# ==== 关键修复 - 模型加载问题 =====
def load_models():
    """加载所有模型和映射 - 修复模型加载问题"""
    # 1. 加载人脸检测器
    try:
        detector = cv2.CascadeClassifier(CASCADE_PATH)
        if detector.empty():
            logger.error("检测器加载失败: %s", CASCADE_PATH)
            logger.info("请检查文件是否存在或下载: wget -P shared/ https://raw.githubusercontent.com/opencv/opencv/3.2.0/data/haarcascades/haarcascade_frontalface_default.xml")
            return None, None, None
    except Exception as e:
        logger.error("加载检测器失败: %s", str(e))
        return None, None, None
    
    # 2. 加载识别模型 - 兼容OpenCV 3.2.0
    try:
        # OpenCV 3.2.0专用API
        recognizer = cv2.face.createLBPHFaceRecognizer()
        
        if not os.path.exists(TRAINER_PATH):
            logger.error("模型文件不存在: %s", TRAINER_PATH)
            logger.info("请先运行人脸注册程序创建模型")
            return None, None, None
            
        recognizer.load(TRAINER_PATH)
    except Exception as e:
        logger.error("加载识别器失败: %s", str(e))
        return None, None, None
    
    # 3. 加载用户映射
    id_map = {}
    if os.path.exists(ID_MAP_PATH):
        try:
            with open(ID_MAP_PATH, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if ':' in line:
                        parts = line.split(':')
                        if len(parts) >= 2:
                            id_val = int(parts[0])
                            username = ':'.join(parts[1:])
                            id_map[id_val] = username
                            logger.debug("加载用户映射: ID %d -> %s", id_val, username)
        except Exception as e:
            logger.error("加载ID映射失败: %s", str(e))
    
    return detector, recognizer, id_map

# ==== 关键修复 - 识别置信度处理 =====
def process_face(detector, recognizer, id_map, gray_frame, color_frame):
    """处理单个人脸并返回结果 - 修复置信度阈值问题"""
    # 默认结果
    result = "no_face"
    user_name = "Unknown"
    confidence_val = 100
    label_id = -1
    
    # 人脸检测
    faces = detector.detectMultiScale(
        gray_frame,
        scaleFactor=1.1,
        minNeighbors=5,
        minSize=(60, 60)
    )
    
    if len(faces) > 0:
        # 取最大人脸
        (x, y, w, h) = max(faces, key=lambda f: f[2]*f[3])
        
        # 裁剪人脸区域
        face_roi = gray_frame[y:y+h, x:x+w]
        
        # 关键改进1: 统一尺寸为训练时的大小
        face_roi = cv2.resize(face_roi, (100, 100))
        
        # 识别人脸
        label_id, confidence_val = recognizer.predict(face_roi)
        
        # 关键改进2: 优化置信度阈值 - 针对您的69.6进行调整
        # OpenCV LBPH识别器的置信度通常: 
        #   0-50: 高匹配
        #   50-70: 中等匹配
        #   70+: 低匹配/陌生人
        if confidence_val < 70:  # 调整阈值以适应您的场景
            result = "known"
            user_name = id_map.get(label_id, f"ID {label_id}")
        else:
            result = "stranger"
            user_name = "Unknown"
        
        # 在帧上标记结果
        color = (0, 255, 0) if result == "known" else (0, 0, 255)
        cv2.rectangle(color_frame, (x, y), (x+w, y+h), color, 2)
        status_text = f"{user_name} ({confidence_val:.1f})" if result == "known" else f"Unknown ({confidence_val:.1f})"
        cv2.putText(color_frame, status_text, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 1)
    
    return result, user_name, confidence_val, color_frame

# ==== 识别主函数 =====
def recognize_and_send():
    """人脸识别并发送结果到PC - 增强版"""
    # 加载模型
    detector, recognizer, id_map = load_models()
    if not detector or not recognizer:
        logger.error("模型加载失败，无法继续")
        return
    
    # 显示加载的用户映射
    if id_map:
        logger.info("已加载用户映射: %d个用户", len(id_map))
        for uid, name in id_map.items():
            logger.info("- ID %d: %s", uid, name)
    else:
        logger.warning("未加载用户映射文件，将无法显示用户名")
    
    # 连接PC端
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect((PC_IP, PC_PORT))
        logger.info("已连接到PC端: %s:%d", PC_IP, PC_PORT)
    except Exception as e:
        logger.error("无法连接到PC: %s", str(e))
        return
    
    # 打开摄像头
    try:
        # 查找最佳摄像头设备
        possible_devices = glob.glob("/dev/video*")
        camera_index = 0
        
        if possible_devices:
            logger.info("找到摄像头设备: %s", ", ".join(possible_devices))
            # 尝试video0
            if "/dev/video0" in possible_devices:
                camera_index = 0
            else:
                camera_index = int(possible_devices[0].replace("/dev/video", ""))
        
        cap = cv2.VideoCapture(camera_index)
        cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        
        if not cap.isOpened():
            logger.error("无法打开摄像头")
            sock.close()
            return
    except Exception as e:
        logger.error("摄像头初始化失败: %s", str(e))
        sock.close()
        return
    
    logger.info("开始人脸识别...按Ctrl+C停止")
    
    last_alarm_time = 0
    alarm_cooldown = 5  # 警报冷却时间(秒)
    
    try:
        while True:
            # 读取帧
            ret, color_frame = cap.read()
            if not ret:
                logger.warning("读取摄像头失败")
                time.sleep(0.1)
                continue
            
            # 转换为灰度图
            gray_frame = cv2.cvtColor(color_frame, cv2.COLOR_BGR2GRAY)
            
            # 处理人脸
            result, user_name, confidence_val, result_frame = process_face(
                detector, recognizer, id_map, gray_frame, color_frame
            )
            
            # 如果是陌生人且冷却时间已过，触发警报
            if result == "stranger" and time.time() - last_alarm_time > alarm_cooldown:
                logger.warning("检测到陌生人! 置信度: %.2f", confidence_val)
                if os.path.exists(ALARM_PATH):
                    try:
                        os.system(f"aplay {ALARM_PATH} &")
                    except:
                        pass
                last_alarm_time = time.time()
            
            # 压缩图像
            _, jpeg = cv2.imencode('.jpg', result_frame)
            frame_data = jpeg.tobytes()
            
            # 创建数据包
            data_packet = {
                'result': result,
                'user_name': user_name,
                'confidence': confidence_val,
                'frame_data': frame_data
            }
            
            # 序列化并发送
            try:
                serialized_data = pickle.dumps(data_packet)
                message_size = struct.pack(">L", len(serialized_data))
                sock.sendall(message_size + serialized_data)
            except Exception as e:
                logger.error("网络发送错误: %s", str(e))
                break
            
            # 控制帧率
            time.sleep(0.05)
            
    except KeyboardInterrupt:
        logger.info("用户停止识别")
    except Exception as e:
        logger.error("识别过程中出错: %s", str(e))
    finally:
        cap.release()
        sock.close()
        logger.info("资源已释放")

# ==== 主程序入口 ====
if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("人脸识别监控 - 设备端 (修复版)")
    print("=" * 50)
    
    # 显示关键路径
    logger.info("项目目录: %s", PROJECT_DIR)
    logger.info("模型文件: %s", TRAINER_PATH)
    logger.info("映射文件: %s", ID_MAP_PATH)
    logger.info("连接目标: %s:%d", PC_IP, PC_PORT)
    
    # 执行识别
    recognize_and_send()
    
    print("\n程序结束")

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PC监控端 - 修复陌生人显示问题
"""

import socket
import struct
import pickle
import cv2
import numpy as np
import threading
import logging
import time
import sys

# ==== 配置参数 =====
HOST = '0.0.0.0'  # 监听所有网卡
PORT = 8888        # 监听端口

# ==== 配置日志 =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('PCMonitor')

# ==== 窗口管理 =====
def create_window():
    """创建显示窗口"""
    try:
        cv2.namedWindow("监控中心 - 人脸识别", cv2.WINDOW_NORMAL)
        cv2.resizeWindow("监控中心 - 人脸识别", 800, 600)
        return True
    except:
        logger.error("无法创建显示窗口")
        return False

# ==== 报警管理 =====
class AlarmManager:
    def __init__(self):
        self.last_alarm_time = 0
        self.alarm_cooldown = 5  # 报警冷却时间(秒)
    
    def trigger_alarm(self):
        """触发报警（避免频繁报警）"""
        current_time = time.time()
        if current_time - self.last_alarm_time > self.alarm_cooldown:
            self.last_alarm_time = current_time
            # 使用系统蜂鸣器作为备选方案
            sys.stdout.write('\a')
            sys.stdout.flush()

# ==== 监控主函数 ====
def start_monitoring():
    """启动监控服务器"""
    # 创建socket
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server.bind((HOST, PORT))
        server.listen(1)
        logger.info("监控服务启动，监听 %s:%d", HOST, PORT)
        logger.info("等待设备连接...")
    except Exception as e:
        logger.error("启动服务失败: %s", str(e))
        return
    
    # 初始化报警管理器
    alarm_manager = AlarmManager()
    
    # 创建窗口
    if not create_window():
        return
    
    try:
        # 接受设备连接
        conn, addr = server.accept()
        logger.info("设备已连接: %s:%d", addr[0], addr[1])
        
        # 主循环
        while True:
            # 接收消息大小
            data = conn.recv(4)
            if not data or len(data) < 4:
                logger.warning("连接中断")
                break
                
            message_size = struct.unpack(">L", data)[0]
            
            # 接收完整数据
            serialized_data = b""
            while len(serialized_data) < message_size:
                remaining = message_size - len(serialized_data)
                packet = conn.recv(4096 if remaining > 4096 else remaining)
                if not packet:
                    logger.warning("数据接收中断")
                    break
                serialized_data += packet
            
            if len(serialized_data) < message_size:
                logger.warning("数据不完整")
                continue
            
            # 反序列化数据
            try:
                data_packet = pickle.loads(serialized_data)
            except Exception as e:
                logger.error("数据解析失败: %s", str(e))
                continue
            
            # 解码图像
            frame_data = data_packet['frame_data']
            try:
                frame = cv2.imdecode(np.frombuffer(frame_data, dtype=np.uint8), cv2.IMREAD_COLOR)
                if frame is None:
                    logger.warning("图像解码失败")
                    continue
            except Exception as e:
                logger.error("图像处理错误: %s", str(e))
                continue
            
            # 处理识别结果
            result = data_packet['result']
            user_name = data_packet['user_name']
            confidence = data_packet['confidence']
            
            # 更新报警状态
            if result == "stranger":
                logger.warning("检测到陌生人! 置信度: %.2f", confidence)
                alarm_manager.trigger_alarm()
                color = (0, 0, 255)  # 红色
                status_text = "ALERT: Unknown Person"
            elif result == "known":
                color = (0, 255, 0)  # 绿色
                status_text = f"User: {user_name}"
            else:
                color = (255, 255, 0)  # 黄色
                status_text = "No Face Detected"
            
            # 添加状态文本
            cv2.putText(frame, status_text, (20, 40), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
            
            # 显示连接信息和置信度
            conn_info = f"Connected to Device | Confidence: {confidence:.1f}"
            cv2.putText(frame, conn_info, (20, frame.shape[0]-20),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (200, 200, 200), 1)
            
            # 显示图像
            try:
                cv2.imshow("监控中心 - 人脸识别", frame)
            except Exception as e:
                logger.error("显示错误: %s", str(e))
                break
            
            # 退出键检测
            key = cv2.waitKey(1)
            if key == 27:  # ESC键退出
                logger.info("用户停止监控")
                break
            elif key == ord(' '):  # 空格键截图
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                filename = f"screenshot-{timestamp}.jpg"
                cv2.imwrite(filename, frame)
                logger.info("已保存截图: %s", filename)
                
    except Exception as e:
        logger.error("监控错误: %s", str(e))
    finally:
        server.close()
        cv2.destroyAllWindows()
        logger.info("监控服务已停止")

# ==== 主程序入口 ====
if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("人脸识别监控中心 - PC端".center(50))
    print("=" * 50)
    
    logger.info("监听端口: %d", PORT)
    logger.info("按ESC键可随时退出")
    logger.info("按空格键可保存当前画面")
    
    start_monitoring()
    print("\n程序结束")

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
人脸注册脚本 - 无图形界面版
解决 "Unable to init server" 错误
"""

import cv2
import os
import numpy as np
import sys
import time
import logging
import glob

# ==== 配置参数 =====
PROJECT_DIR = os.path.join(os.path.expanduser("~"), "projects/my_project")
CASCADE_PATH = os.path.join(PROJECT_DIR, "shared", "haarcascade_frontalface_default.xml")
FACE_DATA_DIR = os.path.join(PROJECT_DIR, "face_data")
TRAINER_PATH = os.path.join(PROJECT_DIR, "shared", "face_model.yml")

# ==== 配置日志 =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('FaceRegistration')

# ==== 加载人脸检测器 =====
def load_face_detector():
    """加载人脸检测模型 - 无GUI版"""
    try:
        if not os.path.exists(CASCADE_PATH):
            logger.error("模型文件不存在: %s", CASCADE_PATH)
            logger.info("请下载模型: wget -P shared/ https://raw.githubusercontent.com/opencv/opencv/3.2.0/data/haarcascades/haarcascade_frontalface_default.xml")
            return None
        
        detector = cv2.CascadeClassifier(CASCADE_PATH)
        if detector.empty():
            logger.error("检测器加载失败，请检查文件完整性")
            return None
        
        logger.info("人脸检测器加载成功")
        return detector
    except Exception as e:
        logger.error("初始化检测器失败: %s", str(e))
        return None

# ==== 检测可用摄像头 =====
def find_camera_device():
    """自动检测可用的摄像头设备"""
    try:
        possible_devices = glob.glob("/dev/video*")
        if not possible_devices:
            logger.error("未找到任何摄像头设备!")
            return None
        
        logger.info("找到摄像头设备: %s", ", ".join(possible_devices))
        
        # 优先尝试video0
        if "/dev/video0" in possible_devices:
            return "/dev/video0"
        
        # 尝试第一个设备
        return possible_devices[0]
    except Exception as e:
        logger.error("查找摄像头失败: %s", str(e))
        return None

# ==== 主注册函数 =====
def register_face():
    """人脸注册流程 - 无GUI版本"""
    # 创建必要目录
    for path in [PROJECT_DIR, os.path.dirname(CASCADE_PATH), FACE_DATA_DIR]:
        os.makedirs(path, exist_ok=True)
    
    # 加载检测器
    detector = load_face_detector()
    if not detector:
        logger.error("无法继续注册流程")
        return
    
    # 获取用户名
    print("\n" + "=" * 50)
    print("人脸注册程序".center(50))
    print("=" * 50)
    username = input("请输入用户名: ").strip()
    if not username:
        logger.error("用户名不能为空")
        return
    
    # 检测摄像头
    camera_device = find_camera_device()
    if not camera_device:
        logger.error("无可用摄像头，程序终止")
        return
    
    # 打开摄像头
    try:
        logger.info("正在打开摄像头: %s", camera_device)
        camera_index = int(camera_device.replace("/dev/video", ""))
        cap = cv2.VideoCapture(camera_index)
        
        if not cap.isOpened():
            logger.error("无法打开摄像头 %s", camera_device)
            logger.info("请尝试修复权限: sudo chmod 666 %s", camera_device)
            logger.info("或添加用户到video组: sudo usermod -aG video $USER")
            return
    except Exception as e:
        logger.error("摄像头初始化失败: %s", str(e))
        return
    
    # 设置分辨率
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 320)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)
    
    print(f"\n==== 正在注册: {username} ====")
    print("请正对摄像头准备拍摄")
    print("系统将自动检测并拍摄人脸照片")
    print("提示：请保持面部在摄像头范围内")
    print("     不要移动太快或太远")
    print("按'Ctrl+C'可随时中断注册")
    
    count = 0  # 照片计数
    last_shot_time = 0  # 上次拍摄时间
    min_shot_interval = 0.8  # 拍摄间隔(秒)
    start_time = time.time()
    
    print(f"\n等待人脸检测... [0/20]")
    
    # 设置键盘中断标志
    interrupted = False
    
    # 主采集循环
    while count < 20 and not interrupted:
        # 读取摄像头帧
        ret, frame = cap.read()
        if not ret:
            logger.warning("读取摄像头失败")
            time.sleep(0.5)
            continue
        
        # 转换为灰度图
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        current_time = time.time()
        
        try:
            # 人脸检测 - 优化参数
            faces = detector.detectMultiScale(
                gray, 
                scaleFactor=1.2,
                minNeighbors=4,
                minSize=(60, 60)
            )
        except Exception as e:
            logger.error("人脸检测错误: %s", str(e))
            break
        
        # 检测到人脸且距离上次拍摄足够久
        if len(faces) > 0 and (current_time - last_shot_time) > min_shot_interval:
            try:
                # 获取最大面积的人脸
                main_face = max(faces, key=lambda face: face[2]*face[3])
                x, y, w, h = main_face
                
                # 裁剪人脸区域
                face_roi = gray[y:y+h, x:x+w]
                
                # 保存图像
                img_path = os.path.join(FACE_DATA_DIR, f"{username}_{count}.jpg")
                cv2.imwrite(img_path, face_roi)
                
                # 更新状态
                count += 1
                last_shot_time = current_time
                print(f"已采集 {count}/20 张", end='\r')
                
                # 短暂暂停
                time.sleep(0.3)
                
            except Exception as e:
                logger.error("保存人脸错误: %s", str(e))
        
        # 如果长时间无人脸(超过10秒)
        if current_time - last_shot_time > 10.0 and count == 0:
            print("\n\n警告: 长时间未检测到人脸，可能原因：")
            print("1. 摄像头被遮挡或未对准面部")
            print("2. 光线过暗或过强")
            print("3. 面部离摄像头太远")
            print("\n按回车键继续尝试，或Ctrl+C退出...")
            input("> ")
            last_shot_time = current_time
        
        # 简单的键盘中断检测 (不再使用cv2.waitKey)
        try:
            # 非阻塞的标准输入检测
            import select
            if select.select([sys.stdin], [], [], 0)[0]:
                if sys.stdin.read(1) == '\x03':  # Ctrl+C
                    interrupted = True
        except ImportError:
            pass
    
    # 释放摄像头
    cap.release()
    
    # 统计结果
    elapsed_time = time.time() - start_time
    logger.info("\n" + "=" * 50)
    logger.info("注册完成")
    logger.info("已拍摄照片: %d/20", count)
    logger.info("总耗时: %.1f秒", elapsed_time)
    logger.info("照片目录: %s", FACE_DATA_DIR)
    
    if count < 5:
        logger.warning("拍摄照片较少，可能影响识别精度")
    
    # 训练模型
    train_recognizer()

# ==== 训练模型 =====
def train_recognizer():
    """训练人脸识别模型"""
    logger.info("\n===== 开始模型训练 =====")
    
    # 确保数据目录存在
    if not os.path.exists(FACE_DATA_DIR):
        logger.error("人脸数据目录不存在: %s", FACE_DATA_DIR)
        return
    
    # 创建用户名到ID的映射
    id_map = {}
    next_id = 1
    
    # 准备训练数据
    face_samples = []
    ids = []
    
    # 遍历所有图片
    for filename in os.listdir(FACE_DATA_DIR):
        if not filename.endswith(('.jpg', '.jpeg', '.png')):
            continue
        
        try:
            img_path = os.path.join(FACE_DATA_DIR, filename)
            gray_img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
            if gray_img is None:
                logger.warning("无法加载图片: %s", filename)
                continue
            
            # 解析用户名(格式: username_X.jpg)
            file_username = filename.split('_')[0]
            
            # 添加用户ID映射
            if file_username not in id_map:
                id_map[file_username] = next_id
                next_id += 1
                
            # 添加到训练集
            face_samples.append(gray_img)
            ids.append(id_map[file_username])
        except Exception as e:
            logger.error("处理图片 %s 错误: %s", filename, str(e))
    
    # 检查是否有足够数据
    logger.info("成功处理 %d 张有效图片", len(face_samples))
    
    if len(face_samples) < 5:
        logger.error("有效图片不足，无法训练")
        return
    
    # 训练模型
    try:
        # 创建识别器 - 兼容OpenCV 3.2.0
        recognizer = cv2.face.createLBPHFaceRecognizer()
        
        # 训练模型
        recognizer.train(face_samples, np.array(ids))
        
        # 保存模型
        recognizer.save(TRAINER_PATH)
        
        # 保存用户映射
        id_map_path = os.path.join(PROJECT_DIR, "shared", "id_map.txt")
        with open(id_map_path, "w", encoding="utf-8") as f:
            for name, id_val in id_map.items():
                f.write(f"{id_val}:{name}\n")
        
        logger.info("训练完成! 模型已保存至: %s", TRAINER_PATH)
        logger.info("用户ID映射表已保存至: %s", id_map_path)
        
        # 测试新模型
        test_model(recognizer)
    except Exception as e:
        logger.error("训练失败: %s", str(e))

def test_model(recognizer):
    """简单测试模型准确性"""
    try:
        # 随机选一张最新图片测试
        img_files = [f for f in os.listdir(FACE_DATA_DIR) 
                    if f.endswith(('.jpg', '.jpeg', '.png'))]
        
        if not img_files:
            return
        
        test_file = max(img_files, key=lambda f: os.path.getmtime(os.path.join(FACE_DATA_DIR, f)))
        img_path = os.path.join(FACE_DATA_DIR, test_file)
        username = test_file.split('_')[0]
        
        # 加载图像
        test_img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
        
        # 预测结果
        predicted_id, confidence = recognizer.predict(test_img)
        
        logger.info("模型测试结果:")
        logger.info("- 测试图片: %s", test_file)
        logger.info("- 用户名: %s", username)
        logger.info("- 预测ID: %d", predicted_id)
        logger.info("- 置信度: %.2f (值越小越好)", confidence)
        
        if confidence < 50:
            logger.info("✅ 测试成功，置信度良好")
        else:
            logger.warning("⚠️ 置信度较高，建议采集更多照片")
    except Exception as e:
        logger.warning("模型测试失败: %s", str(e))

# ==== 主程序入口 ====
if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("龙芯平台人脸注册系统 - 命令行版".center(50))
    print("=" * 50)
    
    logger.info("项目目录: %s", PROJECT_DIR)
    logger.info("人脸数据: %s", FACE_DATA_DIR)
    logger.info("模型文件: %s", TRAINER_PATH)
    print("-" * 50)
    
    register_face()
    
    print("\n程序结束")

