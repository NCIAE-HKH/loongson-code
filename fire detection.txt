import cv2
import socket
import time
import numpy as np
import logging
import os
import struct
import sys
import subprocess
from datetime import datetime

# =====================================================
# 请修改为PC的实际IP地址 (使用192.168.1.243)
PC_IP = '192.168.1.166'  # PC的IP
PORT = 80  # 使用80端口
LOG_DIR = "/home/long2/logs/"
MAX_RETRIES = 20
FRAME_WIDTH = 640
FRAME_HEIGHT = 480
FRAME_RATE = 15  # 帧率
SEND_TIMEOUT = 3
QUALITY = 75  # 图像质量
ALERT_SOUND_FILE = "/home/long2/alarm.wav"  # 设备端报警声音文件路径
ALERT_COOLDOWN = 10  # 报警冷却时间(秒)

# =====================================================================================================
os.makedirs(LOG_DIR, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s-%(name)s-%(levelname)s-%(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, "device.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("FireDetectionDevice")

# ================== 高灵敏度火焰检测器（打火机专用）
class FireDetector:
    def __init__(self):
        # 检测OpenCV版本
        self.opencv_version = cv2.__version__
        self.opencv_major = int(self.opencv_version.split('.')[0])
        logger.info(f"OpenCV版本: {self.opencv_version} (主要版本{self.opencv_major})")
        
        # 火焰检测参数
        self.min_fire_area = 30  # 降低最小面积要求（打火机火焰较小）
        self.fire_score = 0  # 火焰综合评分
        self.consecutive_fire_frames = 0  # 连续检测到火焰的帧数
        
        # 打火机火焰颜色范围（黄色、橙色、红色、蓝色核心）
        self.lower_yellow = np.array([15, 120, 150])
        self.upper_yellow = np.array([35, 255, 255])
        self.lower_orange = np.array([5, 150, 150])
        self.upper_orange = np.array([18, 255, 255])
        self.lower_red = np.array([0, 150, 100])
        self.upper_red = np.array([5, 255, 255])
        self.lower_blue = np.array([95, 50, 50])  # 打火机核心的蓝色火焰
        self.upper_blue = np.array([120, 255, 255])
        
        # 亮度阈值（火焰中心通常最亮）
        self.min_brightness = 180  # 火焰区域最小亮度阈值
        
        # 历史帧用于运动检测
        self.prev_gray = None
        self.prev_fire_mask = None
        self.last_flame_points = []
        self.prev_roi = None  # 用于运动特征

    def get_contours(self, binary_image):
        """兼容所有OpenCV版本的轮廓获取函数"""
        # OpenCV 3.x: 返回三个值 (image, contours, hierarchy)
        if self.opencv_major == 3:
            _, contours, _ = cv2.findContours(
                binary_image, 
                cv2.RETR_EXTERNAL, 
                cv2.CHAIN_APPROX_SIMPLE
            )
        # OpenCV 4.x: 返回两个值 (contours, hierarchy)
        else:
            contours, _ = cv2.findContours(
                binary_image, 
                cv2.RETR_EXTERNAL, 
                cv2.CHAIN_APPROX_SIMPLE
            )
        return contours
    
    def calc_lbp_fast(self, image):
        """快速LBP实现（只计算4个方向）"""
        lbp = np.zeros_like(image, dtype=np.uint8)
        h, w = image.shape
        for i in range(1, h-1):
            for j in range(1, w-1):
                center = image[i, j]
                code = 0
                # 只计算4个方向（上、右、下、左）
                code |= (image[i-1, j] > center) << 0
                code |= (image[i, j+1] > center) << 1
                code |= (image[i+1, j] > center) << 2
                code |= (image[i, j-1] > center) << 3
                lbp[i, j] = code
        return lbp

    def extract_features(self, roi):
        """提取火焰候选区域的特征向量"""
        features = []
        
        # 1. 颜色特征（HSV空间）
        hsv = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
        h_mean = np.mean(hsv[:, :, 0])
        s_mean = np.mean(hsv[:, :, 1])
        v_mean = np.mean(hsv[:, :, 2])
        features.extend([h_mean, s_mean, v_mean])
        
        # 2. 纹理特征（LBP）- 使用简化版本
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        lbp = self.calc_lbp_fast(gray)
        hist, _ = np.histogram(lbp.ravel(), bins=8, range=(0, 256))
        hist = hist / hist.sum()  # 归一化
        features.extend(hist.tolist())
        
        # 3. 形状特征（宽高比）
        height, width = roi.shape[:2]
        aspect_ratio = width / height if height != 0 else 0
        features.append(aspect_ratio)
        
        # 4. 运动特征（与前一帧的差异）
        if self.prev_roi is not None and self.prev_roi.shape == roi.shape:
            diff = cv2.absdiff(roi, self.prev_roi)
            diff_mean = np.mean(diff)
            features.append(diff_mean)
        else:
            features.append(0)
        
        self.prev_roi = roi.copy()
        return np.array(features, dtype=np.float32)

    def detect(self, frame):
        # 转换为HSV颜色空间
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # 创建复合火焰掩膜（针对打火机火焰）
        mask_yellow = cv2.inRange(hsv, self.lower_yellow, self.upper_yellow)
        mask_orange = cv2.inRange(hsv, self.lower_orange, self.upper_orange)
        mask_red = cv2.inRange(hsv, self.lower_red, self.upper_red)
        mask_blue = cv2.inRange(hsv, self.lower_blue, self.upper_blue)  # 打火机核心蓝色火焰
        
        # 融合多个颜色掩膜
        color_mask = cv2.bitwise_or(mask_yellow, mask_orange)
        color_mask = cv2.bitwise_or(color_mask, mask_red)
        color_mask = cv2.bitwise_or(color_mask, mask_blue)
        
        # 形态学处理（增强小火焰连通性）
        kernel = np.ones((3, 3), np.uint8)
        fire_mask = cv2.morphologyEx(color_mask, cv2.MORPH_OPEN, kernel)
        fire_mask = cv2.dilate(fire_mask, kernel, iterations=1)
        
        # 亮度过滤 - 火焰通常是高亮区域
        _, brightness_mask = cv2.threshold(gray, self.min_brightness, 255, cv2.THRESH_BINARY)
        fire_mask = cv2.bitwise_and(fire_mask, brightness_mask)
        
        # 获取轮廓（使用兼容方法）
        contours = self.get_contours(fire_mask)
        
        fire_detected = False
        max_area = 0
        current_flame_points = []
        candidate_regions = []
        
        # 分析每个火焰候选区域
        for cnt in contours:
            area = cv2.contourArea(cnt)
            if area < self.min_fire_area:
                continue
                
            # 记录最大火焰面积
            max_area = max(max_area, area)
            
            # 火焰形状分析
            rect = cv2.boundingRect(cnt)
            aspect_ratio = float(rect[2]) / rect[3] if rect[3] != 0 else 0
            
            # 火焰核心区域亮度分析
            x, y, w, h = rect
            roi = gray[y:y+h, x:x+w]
            max_brightness = np.max(roi)
            avg_brightness = np.mean(roi)
            
            # 打火机火焰特性：高亮度、细长形状
            if max_brightness > 200 and 0.3 < aspect_ratio < 3.0:
                fire_detected = True
                center = (rect[0] + rect[2] // 2, rect[1] + rect[3] // 2)
                current_flame_points.append(center)
                candidate_regions.append((x, y, w, h))
                
                # 在图像上标记火焰（红色矩形）
                cv2.rectangle(frame, (rect[0], rect[1]),
                            (rect[0] + rect[2], rect[1] + rect[3]),
                            (0, 0, 255), 2)
                
                # 在图像上显示火焰信息
                cv2.putText(frame, f"Area: {area}", (rect[0], rect[1]-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)
                cv2.putText(frame, f"Bright: {max_brightness}", (rect[0], rect[1]-30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 255), 1)
        
        # 火焰动态检测（关键优化）
        motion_score = 0
        brightness_change = 0
        
        if fire_detected and self.prev_gray is not None:
            # 1. 计算亮度变化
            current_avg_brightness = np.mean(gray)
            prev_avg_brightness = np.mean(self.prev_gray)
            brightness_change = abs(current_avg_brightness - prev_avg_brightness) / 255.0
            
            # 2. 计算运动变化（火焰中心点移动）
            if self.last_flame_points:
                movement = 0
                for pt in current_flame_points:
                    min_dist = min([np.sqrt((pt[0]-lp[0])**2 + (pt[1]-lp[1])**2) 
                                   for lp in self.last_flame_points], default=5)
                    movement += min_dist
                motion_score = min(1.0, movement / (50 * len(current_flame_points)))
        
        # 火焰分数计算
        if fire_detected:
            # 火焰分数 = 区域大小(40%) + 运动(30%) + 亮度变化(30%)
            area_score = min(1.0, max_area / 300.0)
            motion_score_val = min(1.0, motion_score * 3.0)
            brightness_score = min(1.0, brightness_change * 3.0)
            current_score = area_score * 0.4 + motion_score_val * 0.3 + brightness_score * 0.3
            
            # 更新火焰分数（指数平滑）
            self.fire_score = min(1.0, self.fire_score * 0.7 + current_score * 0.3)
            
            # 连续检测到火焰的帧数
            self.consecutive_fire_frames += 1
            
            # 显示动态信息
            cv2.putText(frame, f"Fire Score: {self.fire_score:.2f}", (10, 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame, f"Motion: {motion_score:.2f}", (10, 60),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame, f"Bright: {brightness_change:.2f}", (10, 90),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.putText(frame, f"Frames: {self.consecutive_fire_frames}", (10, 120),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        else:
            # 没有火焰时降低分数
            self.fire_score = max(0, self.fire_score * 0.8 - 0.05)
            self.consecutive_fire_frames = 0
        
        # 保存当前状态用于下一帧
        self.prev_gray = gray.copy()
        self.last_flame_points = current_flame_points
        
        # 最终决策：只有动态火焰才触发警报
        if fire_detected and self.fire_score > 0.4 and self.consecutive_fire_frames >= 2:
            # 突出显示报警
            cv2.putText(frame, "FLAME DETECTED!", (frame.shape[1]//2-100, 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
            return frame, True, candidate_regions
        else:
            return frame, False, candidate_regions

# =================== 报警声音管理
class AlertPlayer:
    def __init__(self, sound_file):
        self.sound_file = sound_file
        self.last_played = 0
    
    def play(self):
        try:
            if time.time() - self.last_played < ALERT_COOLDOWN:
                return
            subprocess.Popen(["aplay", self.sound_file])
            self.last_played = time.time()
            return True
        except Exception as e:
            logger.error(f"播放报警失败: {str(e)}")
            return False

# =====================================================================================================
class NetworkManager:
    def __init__(self):
        self.host = PC_IP
        self.port = PORT
        self.socket = None
        self.retries = 0
        self.max_retries = MAX_RETRIES
        self.frame_header_size = 4
        self.connection_active = False
    
    def connect(self):
        self.retries = 0
        while self.retries < self.max_retries:
            try:
                self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.socket.settimeout(5)
                self.socket.connect((self.host, self.port))
                logger.info(f"已连接到服务器: {self.host}:{self.port}")
                self.retries = 0
                self.connection_active = True
                return True
            except socket.error as e:
                self.retries += 1
                wait_time = min(2 ** self.retries, 30)
                logger.warning(f"连接失败 ({self.retries}/{self.max_retries}): {e}, 将在{wait_time}s后重试")
                time.sleep(wait_time)
        logger.error(f"{self.max_retries}次重试后连接失败")
        return False
    
    def send_frame(self, frame):
        if not self.connection_active:
            if not self.connect():
                return False
        
        try:
            # 压缩图像 (OpenCV兼容处理)
            result = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, QUALITY])
            
            # OpenCV版本兼容处理
            if isinstance(result, tuple) and len(result) >= 2:
                # OpenCV 3.x格式: (success, buffer)
                success, img_buffer = result
            else:
                # OpenCV 4.x格式
                success = True
                img_buffer = result
            
            if success:
                frame_data = img_buffer.tobytes()
                header = struct.pack('>L', len(frame_data))
                self.socket.sendall(header + frame_data)
                return True
            return False
        except Exception as e:
            logger.error(f"发送帧失败: {str(e)}")
            self.close_socket()
            return False
    
    def send_features(self, features):
        """发送火焰特征向量到PC端"""
        if not self.connection_active:
            return False
        
        try:
            # 序列化特征向量
            feature_data = features.tobytes()
            header = struct.pack('>L', len(feature_data))
            self.socket.sendall(header + feature_data)
            return True
        except Exception as e:
            logger.error(f"发送特征失败: {str(e)}")
            return False
    
    def send_alert(self):
        if not self.connection_active:
            return False
        try:
            alert_msg = f"FIRE_ALERT|{datetime.now().isoformat()}|检测到火焰!".encode()
            header = struct.pack('>L', len(alert_msg))
            self.socket.sendall(header + alert_msg)
            return True
        except Exception as e:
            logger.error(f"发送警报失败: {str(e)}")
            return False
    
    def close_socket(self):
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None
            self.connection_active = False
    
    def close(self):
        self.close_socket()
        logger.info("网络连接已关闭")

# =====================================================================================================
def main():
    logger.info("启动火焰检测设备")
    logger.info(f"设备IP: 192.168.1.162")
    
    # 初始化摄像头
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        logger.error("摄像头打开失败，正在重试...")
        for _ in range(3):
            cap = cv2.VideoCapture(0)
            if cap.isOpened():
                break
            time.sleep(2)
        else:
            logger.error("摄像头无法访问，程序退出")
            return
    
    # 设置摄像头参数
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, FRAME_WIDTH)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, FRAME_HEIGHT)
    cap.set(cv2.CAP_PROP_FPS, FRAME_RATE)
    
    # 初始化组件
    fire_detector = FireDetector()
    network = NetworkManager()
    alert_player = AlertPlayer(ALERT_SOUND_FILE)
    
    # 状态变量
    last_alert_time = 0
    frame_count = 0
    start_time = time.time()
    last_frame_time = time.time()
    feature_buffer = []
    
    # 绑定到单个CPU核心（龙芯优化）
    try:
        import os
        os.sched_setaffinity(0, {0})
        logger.info("已绑定到CPU核心0")
    except:
        logger.warning("CPU核心绑定失败，继续运行")
    
    try:
        while True:
            current_time = time.time()
            elapsed = current_time - last_frame_time
            
            # 控制帧率
            if elapsed < 1.0 / FRAME_RATE:
                time.sleep(max(0, (1.0 / FRAME_RATE) - elapsed - 0.001))
                continue
            
            last_frame_time = current_time
            
            # 读取帧
            ret, frame = cap.read()
            if not ret:
                logger.warning("帧读取失败，跳过此帧")
                time.sleep(0.1)
                continue
            
            # 火焰检测（核心功能）
            processed_frame, fire_detected, candidates = fire_detector.detect(frame)
            
            # 提取特征并发送
            if fire_detected and candidates:
                # 取最大的候选区域
                largest_candidate = max(candidates, key=lambda c: c[2]*c[3])
                x, y, w, h = largest_candidate
                roi = frame[y:y+h, x:x+w]
                
                if roi.size > 0:
                    # 提取特征
                    features = fire_detector.extract_features(roi)
                    feature_buffer.append(features)
                    
                    # 每3帧发送一次特征（减少带宽）
                    if len(feature_buffer) >= 3:
                        # 取平均值作为特征向量
                        avg_features = np.mean(feature_buffer, axis=0)
                        network.send_features(avg_features)
                        feature_buffer = []
            
            # 发送帧到PC端
            network.send_frame(processed_frame)
            
            # 处理火焰警报
            if fire_detected:
                if (current_time - last_alert_time) > ALERT_COOLDOWN:
                    logger.warning("检测到火焰！触发警报")
                    
                    # 播放警报声
                    alert_player.play()
                    
                    # 发送警报到PC
                    network.send_alert()
                    
                    # 保存证据
                    save_path = f"{LOG_DIR}/alert_{int(current_time)}.jpg"
                    cv2.imwrite(save_path, frame)
                    logger.info(f"保存警报图片: {save_path}")
                    
                    last_alert_time = current_time
            
            # 性能监控
            frame_count += 1
            if frame_count % 50 == 0:
                elapsed_time = current_time - start_time
                if elapsed_time > 0:
                    fps = frame_count / elapsed_time
                    status = f"运行中 - FPS: {fps:.1f}, 火焰评分: {fire_detector.fire_score:.2f}"
                    logger.info(status)
            
            # 网络自动重连
            if frame_count % 10 == 0 and not network.connection_active:
                network.connect()
    
    except KeyboardInterrupt:
        logger.info("用户中断程序")
    except Exception as e:
        logger.critical(f"未处理异常: {str(e)}")
    finally:
        cap.release()
        network.close()
        logger.info("设备关闭")
        sys.exit(0)

if __name__ == "__main__":
main()


import cv2
import socket
import threading
import numpy as np
import logging
import time
import os
import winsound
import queue
import struct
import sys

# 检查并尝试导入scikit-learn
try:
    from sklearn.svm import SVC
    from sklearn.preprocessing import StandardScaler
    import joblib
    sklearn_available = True
except ImportError:
    sklearn_available = False
    print("警告: scikit-learn未安装，AI功能将禁用")

#====================配置参数===================
PORT = 80  # 使用80端口匹配设备端
LOG_DIR = "./logs/"
WINDOW_NAME = "Fire Monitoring System"
MAX_BUFFER_SIZE = 65536 * 4  # 大缓冲区用于处理视频帧
MIN_FRAME_WIDTH = 640
MIN_FRAME_HEIGHT = 480
ALARM_SOUND_DURATION = 3000  # 报警声音持续时间(ms)
CONNECTION_TIMEOUT = 5.0  # 连接超时时间
ALERT_COOLDOWN = 10  # 报警冷却时间(秒)

#==========日志配置
os.makedirs(LOG_DIR, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s-%(name)s-%(levelname)s-%(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, "pc_monitor.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("PCMonitor")

#====================帧缓冲区系统=======================
class FrameBuffer:
    """三缓冲系统确保稳定显示"""
    def __init__(self, max_frames=3):
        self.queue = queue.Queue(max_frames)
        self.last_valid_frame = np.zeros((MIN_FRAME_HEIGHT, MIN_FRAME_WIDTH, 3), dtype=np.uint8)
    
    def put_frame(self, frame):
        try:
            self.queue.put_nowait(frame)
            self.last_valid_frame = frame  # 更新最后有效帧
        except queue.Full:
            # 如果队列满，移除最旧的帧
            try:
                self.queue.get_nowait()
            except queue.Empty:
                pass
            self.queue.put_nowait(frame)
            self.last_valid_frame = frame
    
    def get_frame(self):
        try:
            return self.queue.get_nowait()
        except queue.Empty:
            return self.last_valid_frame  # 返回最后有效帧防止黑屏

#==================视频显示管理===================
class VideoDisplay:
    def __init__(self):
        # 初始化属性
        self.status = "Initializing..."
        self.last_alert_time = "Never"
        self.fps = 0.0
        self.frame_counter = 0
        self.last_frame_time = time.time()
        self.frame_buffer = FrameBuffer()
        self.connection_status = "Disconnected"
        self.last_alert = 0
        self.alert_status = "Normal"
        
        # 创建窗口
        cv2.namedWindow(WINDOW_NAME, cv2.WINDOW_NORMAL)
        cv2.resizeWindow(WINDOW_NAME, 800, 600)
        self.show_default_frame()
    
    def show_default_frame(self):
        """显示默认帧(避免黑屏)"""
        self.current_frame = np.zeros((MIN_FRAME_HEIGHT, MIN_FRAME_WIDTH, 3), dtype=np.uint8)
        self.add_status_info()
        cv2.imshow(WINDOW_NAME, self.current_frame)
        cv2.waitKey(1)
    
    def add_status_info(self, frame=None):
        """在帧上添加状态信息"""
        if frame is None:
            display_frame = self.current_frame.copy()
        else:
            display_frame = frame.copy()
        
        # 状态背景条
        cv2.rectangle(display_frame, (0, 0), (display_frame.shape[1], 180), (0, 0, 0), -1)
        cv2.addWeighted(display_frame, 0.7, display_frame, 0.3, 0, display_frame)
        
        # 添加状态信息 (修改为英文)
        cv2.putText(display_frame, f"Status: {self.status}",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
        cv2.putText(display_frame, f"Connection: {self.connection_status}",
                    (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)
        cv2.putText(display_frame, f"FPS: {self.fps:.1f}",
                    (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(display_frame, f"Last Alert: {self.last_alert_time}",
                    (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        
        # 报警状态显示
        alert_color = (0, 0, 255) if self.alert_status == "FIRE ALERT!" else (0, 255, 0)
        cv2.putText(display_frame, f"Alert Status: {self.alert_status}",
                    (10, 150), cv2.FONT_HERSHEY_SIMPLEX, 0.7, alert_color, 2)
        
        return display_frame
    
    def update_frame(self, frame):
        """更新显示的帧"""
        if frame is not None:
            self.current_frame = self.add_status_info(frame)
            self.frame_buffer.put_frame(self.current_frame)
        self.update_display()
    
    def update_display(self):
        """更新显示窗口"""
        current_frame = self.frame_buffer.get_frame()
        
        # 更新FPS
        current_time = time.time()
        if current_time - self.last_frame_time >= 1.0:
            self.fps = self.frame_counter / (current_time - self.last_frame_time)
            self.frame_counter = 0
            self.last_frame_time = current_time
        
        cv2.imshow(WINDOW_NAME, current_frame)
        cv2.waitKey(1)
    
    def record_alert(self):
        """记录报警时间并播放报警"""
        self.last_alert_time = time.strftime("%H:%M:%S")
        self.last_alert = time.time()
        self.alert_status = "FIRE ALERT!"
        
        # 播放报警声音
        winsound.Beep(1000, ALARM_SOUND_DURATION)  # 1000Hz
        winsound.Beep(1500, 1000)  # 1500Hz
        logger.warning("Fire alarm triggered!")
        
        # 10秒后重置报警状态
        threading.Timer(ALERT_COOLDOWN, self.reset_alert).start()
    
    def reset_alert(self):
        """重置报警状态"""
        if time.time() - self.last_alert >= ALERT_COOLDOWN:
            self.alert_status = "Normal"
    
    def update_connection_status(self, status):
        """更新连接状态"""
        self.connection_status = status
        self.status = "Device connected" if "connected" in status else "Waiting for device"

#==================网络服务(报警处理核心)=================
class FireMonitorServer:
    def __init__(self, video_display):
        self.video_display = video_display
        self.server_socket = None
        self.client_socket = None
        self.client_address = None
        self.is_running = True
        self.frame_header_size = 4  # 帧长度头部大小
        self.connection_active = False
        
        # 初始化AI模型相关变量
        self.fire_model = None
        self.scaler = None
        
        if sklearn_available:
            # 先初始化scaler
            self.scaler = StandardScaler()
            # 然后加载模型
            self.fire_model = self.load_fire_model()
        else:
            logger.warning("AI模型不可用，scikit-learn未安装")
    
    def load_fire_model(self):
        """创建并训练轻量级火焰检测模型"""
        # 尝试加载已有模型
        model_path = "fire_detection_model.pkl"
        if os.path.exists(model_path):
            try:
                model = joblib.load(model_path)
                logger.info("火焰检测模型加载成功")
                return model
            except:
                logger.warning("模型加载失败，创建新模型")
        
        # 创建新模型（在实际应用中应使用训练数据）
        logger.info("创建新的火焰检测模型")
        
        # 这里应该使用真实数据集进行训练
        # 为演示目的，我们创建一个简单的模型
        model = SVC(kernel='linear', probability=True)
        
        # 示例数据（实际应替换为真实数据）
        # 格式：[H_mean, S_mean, V_mean, LBP1-8, Aspect_ratio, Motion]
        X_train = np.array([
            [20, 200, 220, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.8, 50],  # 火焰样本
            [100, 50, 100, 0.3, 0.2, 0.1, 0.05, 0.05, 0.05, 0.1, 0.15, 1.2, 10],  # 非火焰样本
            [25, 180, 200, 0.05, 0.1, 0.15, 0.2, 0.1, 0.1, 0.1, 0.1, 0.7, 45],  # 火焰样本
            [110, 40, 90, 0.2, 0.3, 0.1, 0.1, 0.1, 0.05, 0.05, 0.1, 1.5, 8]   # 非火焰样本
        ])
        y_train = np.array([1, 0, 1, 0])  # 1=火焰, 0=非火焰
        
        # 数据标准化
        self.scaler.fit(X_train)
        X_train_scaled = self.scaler.transform(X_train)
        
        # 训练模型
        model.fit(X_train_scaled, y_train)
        
        # 保存模型
        joblib.dump(model, model_path)
        logger.info("火焰检测模型创建并保存成功")
        return model
    
    def start(self):
        self.video_display.status = "Starting server..."
        self.video_display.update_display()
        
        try:
            # 创建服务器socket
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.server_socket.bind(('0.0.0.0', PORT))
            self.server_socket.listen(1)
            self.server_socket.settimeout(2.0)
            
            # 获取本机IP地址
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            try:
                # 连接到公共DNS服务器以获取本地IP
                s.connect(("8.8.8.8", 80))
                ip_address = s.getsockname()[0]
            except:
                # 回退方法
                hostname = socket.gethostname()
                ip_address = socket.gethostbyname(hostname)
            finally:
                s.close()
            
            self.video_display.status = f"Listening: {ip_address}:{PORT}"
            logger.info(f"Server started at: {ip_address}:{PORT}")
            self.video_display.update_connection_status("Waiting for device")
            
            while self.is_running:
                if not self.connection_active:
                    self.accept_client_connection()
                
                if self.connection_active:
                    try:
                        # 1. 读取4字节的数据长度
                        header = self.recv_bytes(4)
                        if not header:
                            logger.info("Client closed connection")
                            self.disconnect_client()
                            continue
                        
                        data_length = struct.unpack('>I', header)[0]
                        
                        # 2. 读取指定长度的数据
                        data = self.recv_bytes(data_length)
                        if not data:
                            self.disconnect_client()
                            continue
                        
                        # 3. 判断数据类型（帧或特征）
                        if data_length == 52:  # 特征向量长度(13个float32*4bytes)
                            self.process_feature_data(data)
                        else:
                            # 尝试判断是否为报警信息
                            try:
                                decoded_data = data.decode('utf-8')
                                if decoded_data.startswith('FIRE_ALERT'):
                                    # 处理报警信息
                                    logger.warning(f"Received fire alert: {decoded_data}")
                                    self.video_display.record_alert()
                                    continue
                            except UnicodeDecodeError:
                                # 不是文本数据，视为视频帧
                                self.process_frame_data(data)
                    
                    except socket.timeout:
                        # 超时不处理
                        pass
                    except ConnectionResetError:
                        logger.warning("Connection reset")
                        self.disconnect_client()
                    except Exception as e:
                        logger.error(f"Receive error: {str(e)[:200]}")
                        self.disconnect_client()
                else:
                    # 没有活跃连接时更新状态
                    self.video_display.update_connection_status("Waiting for device")
                    time.sleep(0.5)
        
        except Exception as e:
            logger.critical(f"Server error: {str(e)}")
        finally:
            self.stop()
    
    def recv_bytes(self, num_bytes):
        """可靠地接收指定数量的字节"""
        chunks = []
        bytes_received = 0
        while bytes_received < num_bytes:
            chunk = self.client_socket.recv(min(num_bytes - bytes_received, MAX_BUFFER_SIZE))
            if not chunk:
                return None
            chunks.append(chunk)
            bytes_received += len(chunk)
        return b"".join(chunks)
    
    def accept_client_connection(self):
        """接受新的客户端连接"""
        try:
            self.client_socket, client_addr = self.server_socket.accept()
            self.client_socket.settimeout(CONNECTION_TIMEOUT)
            self.client_address = client_addr[0]
            self.video_display.status = f"Connected: {self.client_address}"
            self.video_display.update_connection_status(f"Connected {self.client_address}")
            logger.info(f"Device connected: {self.client_address}")
            self.connection_active = True
            return True
        except socket.timeout:
            return False
        except Exception as e:
            logger.error(f"Accept connection error: {str(e)}")
            self.connection_active = False
            return False
    
    def process_frame_data(self, frame_data):
        """处理接收到的帧数据"""
        try:
            # 尝试解码为图像
            img_array = np.frombuffer(frame_data, dtype=np.uint8)
            frame = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
            
            if frame is not None:
                # 确保帧尺寸满足最小值要求
                h, w = frame.shape[:2]
                if w < MIN_FRAME_WIDTH or h < MIN_FRAME_HEIGHT:
                    frame = cv2.resize(frame, (MIN_FRAME_WIDTH, MIN_FRAME_HEIGHT))
                
                # 更新帧计数器
                self.video_display.frame_counter += 1
                self.video_display.update_frame(frame)
            else:
                logger.warning("Frame decode failed")
                # 保存错误数据用于调试
                with open(os.path.join(LOG_DIR, "bad_frame.bin"), "wb") as f:
                    f.write(frame_data)
        except Exception as e:
            logger.error(f"Frame process error: {str(e)}")
    
    def process_feature_data(self, data):
        """处理特征向量数据"""
        if not self.fire_model:
            logger.warning("收到特征数据但AI模型不可用")
            return
            
        try:
            # 反序列化特征向量
            features = np.frombuffer(data, dtype=np.float32)
            
            # 标准化特征
            features_scaled = self.scaler.transform(features.reshape(1, -1))
            
            # 使用AI模型进行预测
            is_fire = self.fire_model.predict(features_scaled)[0]
            fire_prob = self.fire_model.predict_proba(features_scaled)[0][1]
            
            if is_fire and fire_prob > 0.7:
                logger.warning(f"AI确认火焰! 概率: {fire_prob:.2f}")
                self.video_display.record_alert()
                
        except Exception as e:
            logger.error(f"特征处理错误: {str(e)}")
    
    def disconnect_client(self):
        """断开客户端连接"""
        self.connection_active = False
        if self.client_socket:
            try:
                self.client_socket.close()
            except:
                pass
            self.client_socket = None
        self.client_address = None
        self.video_display.status = "Waiting for device"
        self.video_display.update_connection_status("Disconnected")
        logger.info("Client disconnected")
        time.sleep(1)  # 等待后重试连接
    
    def stop(self):
        """停止服务器"""
        self.is_running = False
        self.disconnect_client()
        if self.server_socket:
            try:
                self.server_socket.close()
            except:
                pass
        logger.info("Server shutdown")

#==================================================================================================
def main():
    logger.info("Starting PC Fire Monitoring System")
    
    # 创建视频显示
    display = VideoDisplay()
    
    # 创建并启动服务器
    server = FireMonitorServer(display)
    server_thread = threading.Thread(target=server.start, daemon=True)
    server_thread.start()
    
    # 主显示循环
    try:
        while True:
            key = cv2.waitKey(30)
            # 处理键盘输入
            if key == 27:  # ESC键
                logger.info("User exit")
                break
            
            # 定期更新显示
            display.update_display()
            
            # 防止占用过高CPU
            time.sleep(0.02)
    
    except KeyboardInterrupt:
        logger.info("User interrupted")
    except Exception as e:
        logger.critical(f"Program error: {str(e)}")
    finally:
        cv2.destroyAllWindows()
        logger.info("System shutdown")

if __name__ == "__main__":
    main()
