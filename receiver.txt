#!/usr/bin/env python3
# receiver.py - 音视频接收端（完整版）
import cv2
import numpy as np
import socket
import threading
import time
import logging
import sys
import sounddevice as sd
import queue

# ============== 配置区域 ==============
VIDEO_PORT = 5002
AUDIO_PORT = 5003
DISPLAY_SIZE = (640, 480)  # 显示窗口大小
BUFFER_SIZE = 65535        # UDP缓冲区大小
AUDIO_SAMPLE_RATE = 44100 # 音频采样率
AUDIO_CHANNELS = 1        # 音频通道数
# =====================================

class MediaReceiver:
    def __init__(self):
        # 状态控制
        self.running = True
        self.window_name = "Loongson Stream"
		
		# 初始化关键属性（添加下面这一行修复错误）
        self.last_resize_time = time.time()  # 记录窗口操作时间
        self.last_video_fps = 0.0  # 添加这一行解决"last_video_fps"错误
        self.frame_queue = queue.Queue()
        self.audio_queue = queue.Queue()
		# 创建窗口但不立即调整大小
        cv2.namedWindow(self.window_name, cv2.WINDOW_NORMAL)
        
        # 网络套接字
        self.video_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.audio_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
        # 套接字设置
        self.video_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 10 * 1024 * 1024)
        self.audio_socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 10 * 1024 * 1024)
        
        # 帧队列
        self.frame_queue = queue.Queue(maxsize=2)  # 视频帧队列
        
        # 音频队列
        self.audio_queue = queue.Queue(maxsize=100)  # 音频数据队列
        
        # 性能计数器
        self.video_frame_count = 0
        self.audio_packet_count = 0
        self.start_time = time.time()
        
        # 配置日志
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s [%(levelname)s] %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S',
            handlers=[logging.StreamHandler(sys.stdout)]
        )
        
        # 初始化音频输出
        self.init_audio_output()
        
        # 初始化视频窗口
        cv2.namedWindow("Loongson Stream", cv2.WINDOW_NORMAL)
        cv2.resizeWindow("Loongson Stream", DISPLAY_SIZE[0], DISPLAY_SIZE[1])
        cv2.moveWindow("Loongson Stream", 100, 100)
        
        logging.info("✅ 接收端初始化完成")

    def init_audio_output(self):
        """初始化音频输出流"""
        try:
            # 查询可用的音频输出设备
            devices = sd.query_devices()
            output_device = None
            
            # 优先选择支持44100Hz采样的设备
            for idx, dev in enumerate(devices):
                if dev['max_output_channels'] > 0 and AUDIO_SAMPLE_RATE <= dev['default_samplerate']:
                    output_device = idx
                    break
            
            if output_device is None:
                output_device = sd.default.device[1]
            
            # 创建音频输出流
            self.audio_stream = sd.OutputStream(
                samplerate=AUDIO_SAMPLE_RATE,
                channels=AUDIO_CHANNELS,
                dtype='int16',
                blocksize=1024,
                device=output_device,
                callback=self.audio_callback
            )
            
            self.audio_stream.start()
            logging.info(f"🔊 音频输出已启动 @ {AUDIO_SAMPLE_RATE}Hz (设备: {devices[output_device]['name']})")
            
        except Exception as e:
            logging.error(f"❌ 音频输出初始化失败: {str(e)}")
            self.audio_stream = None

    def audio_callback(self, outdata, frames, time_info, status):
        """音频播放回调函数"""
        if self.audio_queue.empty():
            outdata.fill(0)  # 队列为空时输出静音
            return
        
        try:
            # 从队列获取音频数据
            audio_data = self.audio_queue.get_nowait()
            outdata[:] = np.frombuffer(audio_data, dtype=np.int16).reshape(frames, AUDIO_CHANNELS)
        except queue.Empty:
            outdata.fill(0)
        except Exception as e:
            logging.error(f"🔴 音频播放错误: {str(e)}")
            outdata.fill(0)

    def video_receive_thread(self):
        """视频接收线程"""
        logging.info("📹 视频接收线程启动")
        
        # 绑定端口
        self.video_socket.bind(('0.0.0.0', VIDEO_PORT))
        self.video_socket.settimeout(0.1)
        
        while self.running:
            try:
                # 接收UDP数据包
                data, _ = self.video_socket.recvfrom(BUFFER_SIZE)
                
                # 转换为图像帧
                img_array = np.frombuffer(data, dtype=np.uint8)
                frame = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
                
                if frame is not None:
                    # 添加到帧队列
                    try:
                        self.frame_queue.put_nowait(frame)
                        self.video_frame_count += 1
                    except queue.Full:
                        pass  # 队列满时跳过
                
                # 每秒显示接收统计
                elapsed = time.time() - self.start_time
                if elapsed > 1.0:
                    fps = self.video_frame_count / elapsed
                    logging.info(f"📦 接收帧率: {fps:.1f} FPS")
                    self.video_frame_count = 0
                    self.start_time = time.time()
                    
            except socket.timeout:
                continue  # 超时正常
            except Exception as e:
                logging.error(f"🔴 视频接收错误: {str(e)}")

    def audio_receive_thread(self):
        """音频接收线程"""
        logging.info("🔊 音频接收线程启动")
        
        # 绑定端口
        self.audio_socket.bind(('0.0.0.0', AUDIO_PORT))
        self.audio_socket.settimeout(0.1)
        
        while self.running:
            try:
                # 接收音频数据
                data, _ = self.audio_socket.recvfrom(4096)
                
                # 添加到音频队列
                try:
                    self.audio_queue.put_nowait(data)
                    self.audio_packet_count += 1
                except queue.Full:
                    pass  # 队列满时跳过
                
            except socket.timeout:
                continue  # 超时正常
            except Exception as e:
                logging.error(f"🔴 音频接收错误: {str(e)}")

    def display_thread(self):
        """视频显示线程"""
        FONT = cv2.FONT_HERSHEY_SIMPLEX
        
        # OpenCV 3.2.0兼容性处理
        self.last_resize_time = time.time()
        display_size = (640, 480)  # 明确指定显示尺寸
    
        try:
            # 尝试调整窗口大小
            cv2.resizeWindow(self.window_name, display_size[0], display_size[1])
        except:
            # 旧版OpenCV可能需要额外的延迟
            time.sleep(0.5)
            cv2.resizeWindow(self.window_name, display_size[0], display_size[1])
    
        # 帧率计算初始化
        last_fps_time = time.time()
        frame_count = 0 
        
        while self.running:
            try:
                # 尝试获取新帧
                frame = self.frame_queue.get(timeout=1.0)
                frame_count += 1
				# 计算FPS（代替直接使用last_video_fps）
                current_time = time.time()
                if current_time - last_fps_time >= 1.0:
                    fps = frame_count / (current_time - last_fps_time)
                    self.last_video_fps = fps  # 更新属性值
                    logging.info(f"接收帧率：{fps:.1f} FPS")
                    frame_count = 0
                    last_fps_time = current_time
            
                # 添加帧率显示
                fps_text = f"FPS: {self.last_video_fps:.1f}"
                cv2.putText(frame, fps_text, (10, 30), 
                             cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
                # 更新连接状态
                connection_status = "已连接"
                last_status_time = time.time()
                
                # 创建状态覆盖层
                overlay = frame.copy()
                cv2.rectangle(overlay, (0, 0), (frame.shape[1], 80), (0, 0, 0), -1)
                cv2.addWeighted(overlay, 0.5, frame, 0.5, 0, frame)
                
                # 创建英文状态信息
                fps_text = f"FPS: {self.last_video_fps:.1f}"
                status_text = f"Status: Connected"
                help_text = "Press 'q' to quit"
            
                # 添加状态信息（使用英文字体）
                cv2.putText(frame, fps_text, (10, 30), FONT, 0.7, (0, 255, 0), 2)
                cv2.putText(frame, status_text, (10, 60), FONT, 0.7, (0, 255, 0), 2)
                cv2.putText(frame, help_text, (frame.shape[1]-200, frame.shape[0]-10), 
                            FONT, 0.5, (0, 200, 200), 1)
                
                # 显示图像
                cv2.imshow(self.window_name, frame)
                
            except queue.Empty:
                # 显示等待画面（使用英文）
                waiting_img = np.zeros((DISPLAY_SIZE[1], DISPLAY_SIZE[0], 3), dtype=np.uint8)
                cv2.putText(waiting_img, "Status: Connecting...",
                            (50, DISPLAY_SIZE[1]//2-20), FONT, 0.8, (0, 200, 200), 2)
                cv2.putText(waiting_img, "Waiting for video stream",
                            (50, DISPLAY_SIZE[1]//2+20), FONT, 0.8, (0, 200, 200), 2)
                cv2.imshow("Loongson Stream", waiting_img)
            # 检查退出键
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                self.running = False
                break

    def start(self):
        """启动接收端"""
        logging.info(f"📡 监听端口: {VIDEO_PORT} (视频) | {AUDIO_PORT} (音频)")
        
        # 启动视频接收线程
        video_thread = threading.Thread(target=self.video_receive_thread)
        video_thread.daemon = True
        video_thread.start()
        
        # 启动音频接收线程
        audio_thread = threading.Thread(target=self.audio_receive_thread)
        audio_thread.daemon = True
        audio_thread.start()
        
        # 在主线程运行显示
        self.display_thread()
        
        # 清理资源
        self.cleanup()

    def cleanup(self):
        """资源清理"""
        self.running = False
        cv2.destroyAllWindows()
        
        # 关闭套接字
        self.video_socket.close()
        self.audio_socket.close()
        
        # 关闭音频流
        if self.audio_stream:
            self.audio_stream.stop()
            self.audio_stream.close()
        
        logging.info("✅ 资源已释放")

if __name__ == "__main__":
    try:
        receiver = MediaReceiver()
        receiver.start()
    except Exception as e:
        logging.error(f"🔴 接收端错误: {str(e)}")
